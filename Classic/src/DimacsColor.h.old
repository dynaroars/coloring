static char preamble[10000];//stores DIMACS graph file preamble

bool isAdj(const int &i,const int &j){
  return adjMatrix.at(i).at(j);
}

void get_params(int &nVertices,int &nEdges){

		/* getting Nr_vert and Nr_edge from the preamble string, 
							 containing Dimacs format "p ??? num num" */

		char c, *tmp;
		char * pp = preamble;
		int stop = 0;
		tmp = (char *)calloc(100, sizeof(char));
		
		
		while (!stop && (c = *pp++) != '\0'){
			switch (c)
			  {
				case 'c':
				  while ((c = *pp++) != '\n' && c != '\0');
				  break;
				  
				case 'p':
				  sscanf(pp, "%s %d %d\n", tmp, &nVertices, &nEdges);
				  stop = 1;
				  break;
				  
				default:
				  break;
			  }
		}
		
		free(tmp);

		assert(nVertices&&nEdges);

	
}

//TVN Todo : convert to vector<vector<int> > 
void addEdge(const int &i, const int &j){
  superMatrix[i][0]++;
  superMatrix[i][superMatrix[i][0]] = j;
  superMatrix[j][0]++;
  superMatrix[j][superMatrix[j][0]] = i;	

}

void addEdgeV(const int &i,const int &j){
  for (int a = 0 ; a < sMatrix.at(i).size();a++){
	assert(sMatrix.at(i).at(a)!=j);
  }
  for (int a = 0 ; a < sMatrix.at(j).size();a++){
	assert(sMatrix.at(j).at(a)!=i);
  }

  sMatrix[i].push_back(j);  sMatrix[j].push_back(i);
}

void read_graph_DIMACS_ascii(char *file,int &nVertices,int &nEdges)
{

	int c, oc;
	char * pp = preamble;
	int i,j;
	FILE *fp;

	
	if ( (fp=fopen(file,"r"))==NULL )
	  { printf("ERROR: Cannot open infile\n"); exit(10); }

	for(oc = '\0' ;(c = fgetc(fp)) != EOF && (oc != '\n' || c != 'e')
		; oc = *pp++ = c);
 
	ungetc(c, fp); 
	*pp = '\0';
	get_params(nVertices,nEdges);


	//TVN BUG: this is going to take LOTS of time/space !!! 
	superMatrix = new int* [nVertices + 1];
	for(int jk = 0; jk < nVertices; jk++){
		superMatrix[jk] = new int[ nVertices + 1 ]; 
		//tvn I think this is a COUNTER of how many edges vertex jk has
		superMatrix[jk][0] =  0;//pointer for current position
	}

	for(int i = 0 ; i < nVertices; ++i){
	  vector<int>temp;  sMatrix.push_back(temp);
	}


	for(int i = 0 ; i < nVertices; ++i){
	  vector<int>temp;	  adjMatrix.push_back(temp);
	  for (int j = 0 ; j < nVertices ; ++j)	adjMatrix.at(i).push_back(0);
	}




	while ((c = fgetc(fp)) != EOF){
		switch (c)
		  {
			case 'e':
			  if (!fscanf(fp, "%d %d", &i, &j))
				{ printf("ERROR: corrupted inputfile\n"); exit(10); }

			  addEdge(i-1, j-1);
			  addEdgeV(i-1,j-1);
			  assert(i-1!=j-1);
			  adjMatrix.at(i-1).at(j-1)=1;
			  adjMatrix.at(j-1).at(i-1)=1;

			  break;
			case '\n':
			  
			default:
			  break;
		  }
	}

	fclose(fp);

	//	for(int i = 0 ; i < nVertices ; ++i){
	  //printf("vertex %d has adj %d ,  %d\n",i,superMatrix[i][0],sMatrix.at(i).size());
	//	}

	/*
	for (int i = 0 ; i < 10 ; ++i){
	  int testN = rand()%nVertices+1;
	  for(int j = 0 ; j < sMatrix.at(testN).size();++j){
		printf("%i %d , %d , adj = %d\n",i, testN,sMatrix.at(testN).at(j),isAdj(testN,sMatrix.at(testN).at(j)));
		assert(isAdj(testN,sMatrix.at(testN).at(j)));
	  }
	}
	*/

}



